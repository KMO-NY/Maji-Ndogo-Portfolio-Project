# -*- coding: utf-8 -*-
"""weather_data_processor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17iu_hGvIilpfsHcwXUtzEiNFe82RRZ0A
"""

# These are the imports we're going to use in the weather data processing module
import re
import numpy as np
import pandas as pd
import logging
from data_ingestion import read_from_web_CSV

### START FUNCTION

class WeatherDataProcessor:
      """
      A class for processing weather data including data ingestion, measurement extraction, and calculation of mean values.

      Attributes:
        columns_to_rename (dict): Mapping of old column names to new column names for renaming.
        values_to_rename (dict): Mapping of old measurement values to new values for correction.
        weather_station_data (str): Path or URL to the weather station CSV data file.
        patterns (dict): Regular expression patterns for extracting measurements from text.
        weather_df (DataFrame): DataFrame holding the processed weather data.
        logger (Logger): Logger object for the class to log messages based on the specified logging level.

      Methods:
        __init__(self, config_params, logging_level="INFO"): Initializes the WeatherDataProcessor instance.
        initialize_logging(self, logging_level): Sets up logging based on the specified level.
        weather_station_mapping(self): Loads weather station data from CSV.
        extract_measurement(self, message): Extracts measurement from a text message.
        process_messages(self): Processes all messages to extract and quantify measurements.
        calculate_means(self): Calculates mean values of measurements.
        process(self): Executes the full data processing pipeline.
      """
    def __init__(self, config_params, logging_level="INFO"): # Now we're passing in the confi_params dictionary already
        self.weather_station_data = config_params['weather_csv_path']
        self.patterns = config_params['regex_patterns']
        self.weather_df = None  # Initialize weather_df as None or as an empty DataFrame
        self.initialize_logging(logging_level)

    def initialize_logging(self, logging_level):
        """
        Sets up logging for this instance of WeatherDataProcessor.
        """
        logger_name = __name__ + ".WeatherDataProcessor"
        self.logger = logging.getLogger(logger_name)
        self.logger.propagate = False  # Prevents log messages from being propagated to the root logger

        # Set logging level
        if logging_level.upper() == "DEBUG":
            log_level = logging.DEBUG
        elif logging_level.upper() == "INFO":
            log_level = logging.INFO
        elif logging_level.upper() == "NONE":  # Option to disable logging
            self.logger.disabled = True
            return
        else:
            log_level = logging.INFO  # Default to INFO

        self.logger.setLevel(log_level)

        # Only add handler if not already added to avoid duplicate messages
        if not self.logger.handlers:
            ch = logging.StreamHandler()  # Create console handler
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            ch.setFormatter(formatter)
            self.logger.addHandler(ch)

    def weather_station_mapping(self):
        """
        Loads weather station data from a specified CSV file URL into the weather_df DataFrame.

        This method uses the read_from_web_CSV utility to fetch and load data, then stores it
        in the weather_df attribute of the class instance. It logs the operation's success.
        Additionally, this method can be extended to apply initial transformations to the loaded data.
        """
        self.df = self.df.drop(columns="Unnamed: 0")
        self.df = self.df.merge(weather_map_df, on='Field_ID', how='left')
        weather_map_df = read_from_web_CSV(self.weather_map_data)
        self.logger.info("Successfully loaded weather station data from the web.")
        # Here, you can apply any initial transformations to self.weather_df if necessary.


    def extract_measurement(self, message):
        """
        Extracts measurement key and value from a given message string based on predefined patterns.

        Parameters:
        - message (str): The message string containing measurement information.

        Returns:
        - tuple: A tuple containing the measurement key and its corresponding value if a match is found; otherwise, (None, None).
        """
        for key, pattern in self.patterns.items():
            match = re.search(pattern, message)
            if match:
                self.logger.debug(f"Measurement extracted: {key}")
                return key, float(next((x for x in match.groups() if x is not None)))
        self.logger.debug("No measurement match found.")
        return None, None

    def process_messages(self):
        """
        Processes all messages in the weather_df DataFrame to extract measurements.

        Returns:
        - DataFrame: The modified weather_df DataFrame with added 'Measurement' and 'Value' columns.
        """
        if self.weather_df is not None:
            result = self.weather_df['Message'].apply(self.extract_measurement)
            self.weather_df['Measurement'], self.weather_df['Value'] = zip(*result)
            self.logger.info("Messages processed and measurements extracted.")
        else:
            self.logger.warning("weather_df is not initialized, skipping message processing.")
        return self.weather_df

    def calculate_means(self):
        if self.weather_df is not None:
            means = self.weather_df.groupby(by=['Weather_station_ID', 'Measurement'])['Value'].mean()
            self.logger.info("Mean values calculated.")
            return means.unstack()
        else:
            self.logger.warning("weather_df is not initialized, cannot calculate means.")
            return None

    def process(self):
        """
        Executes the full data processing pipeline: loads and assigns data to weather_df, processes messages,
        and optionally calculates means.

        Returns:
        - DataFrame: The processed weather_df DataFrame.
        """
        self.weather_station_mapping()  # Load and assign data to weather_df
        self.process_messages()  # Process messages to extract measurements
        self.logger.info("Data processing completed.")
### END FUNCTION